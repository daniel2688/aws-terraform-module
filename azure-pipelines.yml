trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: 'AWS Toolkit for Azure DevOps'
  - name: environment
    value: 'dev'  # Cambiar a 'qa' o 'prod' seg√∫n sea necesario

steps:
  - task: TerraformInstaller@0
    inputs:
      terraformVersion: 'latest'

  # Instalaci√≥n de Checkov
  - script: |
      echo "üì• Instalando Checkov para escaneo de seguridad"
      pip install checkov
    displayName: 'Install Checkov'

  - script: |
      echo "üîí Configurando variables de entorno de AWS"
      export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
      export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
      export AWS_DEFAULT_REGION=$(AWS_REGION)

      echo "üöÄ Navegando al entorno: $(environment)"
      cd environments/$(environment)

      echo "üõ†Ô∏è Inicializando Terraform con configuraci√≥n del backend S3"
      terraform init -reconfigure

      echo "üìä Generando el plan de ejecuci√≥n de Terraform"
      terraform plan -out=tfplan

      echo "üîç Escaneando la infraestructura con Checkov"
      checkov -d . --framework terraform || true  # No falla el pipeline
    displayName: 'Terraform Init, Plan and Checkov Scan'

  - script: |
      echo "üîí Configurando variables de entorno de AWS para aplicar cambios"
      export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
      export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
      export AWS_DEFAULT_REGION=$(AWS_REGION)

      cd environments/$(environment)
      echo "üöÄ Aplicando cambios en Terraform"
      terraform apply -auto-approve tfplan
    displayName: 'Terraform Apply'
    continueOnError: true  # Permite continuar incluso si falla

  - script: |
      echo "‚è≥ Esperando 3 minutos antes de destruir recursos..."
      sleep 180
    displayName: 'Wait for 3 minutes'
    condition: always()  # Asegura que este paso se ejecute siempre

  - script: |
      echo "üîí Configurando variables de entorno de AWS para destruir recursos"
      export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
      export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
      export AWS_DEFAULT_REGION=$(AWS_REGION)

      cd environments/$(environment)
      echo "üí• Destruyendo recursos con Terraform"
      terraform destroy -auto-approve
    displayName: 'Terraform Destroy'
    condition: always()  # Ejecutar siempre, incluso si los pasos anteriores fallan
